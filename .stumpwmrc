;; Hey, Emacs! This is a -*- lisp -*- file!

(setf *frame-number-map* "abcdefghijklmnopqrst")

(setf *window-format* "%m%n%s nm=%50t cl=%c id=%i")

;;; Window Appearance
;; The width in pixels given to the borders of regular windows.
(setf *normal-border-width* 0)
;; The width in pixels given to the borders of windows with maxsize or ratio hints.
(setf *maxsize-border-width* 0)
;; The width in pixels given to the borders of transient or pop-up windows.
(setf *transient-border-width* 0)

;;(run-commands "restore-from-file ~/.stumpwm.screendump")

(in-package :stumpwm)

(defun shell-command (command)
  "Run a shell command and display output to screen.
   This must be used in a functional side-effects-free style!
   If a program does not exit, Stumpwm might hang!"
  (check-type command string)
  (echo-string (current-screen) (run-shell-command command t)))

(defun run-shl (&rest cmd)
  "A simpler command to run-shell-command with multiple params"
  (run-shell-command (apply #'concatenate 'string cmd)))

;; ----------------- personal functions

(defun toggle-touchpad-manual (status)
  "Activate/Deactivate the touchpad depending on the status parameter (0/1)."
  (run-shl "~/bin/stumpwm/toggle-touchpad-manual.sh " status)
  ;; banish the mouse from the screen when we deactivate the touchpad
  (if (equal "0" status) (stumpwm::banish)))

(defmacro roraise-and-touchpad-off (command class)
  "Wrap a call to the run-or-raise command but before toggle off the touchpad."
  `(progn
     (toggle-touchpad-manual "0")
     (run-or-raise ,command '(:class ,class))))

;; (defcommand name (args) (interactive-args) "doc-string" (body))
;; wrapper around the zenity cli
(defcommand zenity (command) ()
   "Wrap a call to the cli and output the result into a zenity window"
   (run-shl "zenity --info --text \"$(" command ")\""))

;; ----------------- personal functions

(defcommand toggle-touchpad-auto () ()
  "Activate/Deactivate automatically the touchpad depending on the current status."
  (run-shl "~/bin/stumpwm/toggle-touchpad.sh")
  (stumpwm::banish))
(define-key *root-map* (kbd "T") "toggle-touchpad-auto")

;; ----------------- zenity commands

(defcommand ssh-add-list () ()
  "run the ~/bin/ssh-add.sh script."
  (zenity "ssh-add -L"))
(define-key *root-map* (kbd "K") "ssh-add-list")

(defcommand cat-etc-environment () ()
  "Display the content of the file /etc/environment."
  (zenity "cat /etc/environment"))
(define-key *root-map* (kbd "E") "cat-etc-environment")

(defcommand cat-etc-hosts () ()
  "cat /etc/hosts"
  (zenity "cat /etc/hosts"))
(define-key *root-map* (kbd "H") "cat-etc-hosts")

(defcommand sbin-ifconfig () ()
  "cat /etc/hosts"
  (zenity "/sbin/ifconfig"))
(define-key *root-map* (kbd "I") "sbin-ifconfig")

(defcommand acpi-cmd () ()
  "acpi -b"
  (zenity "/usr/bin/acpi -b"))
(define-key *root-map* (kbd "B") "acpi-cmd")

;; ----------------- run-or-raise commands

(defcommand terminal () ()
  "run an xterm instance or switch to it, if it is already running."
  (roraise-and-touchpad-off "gnome-terminal --hide-menubar" "Gnome-terminal"))
(define-key *root-map* (kbd "x") "terminal")

(defcommand myemacs () ()
  "run an xterm instance or switch to it, if it is already running."
  ;; raise emacs
  (roraise-and-touchpad-off "emacsclient -c" "Emacs24"))
(define-key *root-map* (kbd "e") "myemacs")

;; ----------------- run-shell-commands commands

(defcommand ssh-add-identities () ()
  "Add the identities present in ~/.ssh-agent-identities script."
  (run-shell-command "~/bin/ssh/ssh-add.sh"))
(define-key *root-map* (kbd "A") "ssh-add-identities")

(defcommand switch-to-proxy () ()
  "Switch to proxy."
  (run-shell-command "gksudo ~/bin/proxy/proxy.sh on && killall nm-applet"))
(define-key *root-map* (kbd "p") "switch-to-proxy")

(defcommand switch-to-no-proxy () ()
  "Switch to no proxy."
  (run-shell-command "gksudo ~/bin/proxy/proxy.sh off && killall nm-applet"))
(define-key *root-map* (kbd "P") "switch-to-no-proxy")

(define-key *root-map* (kbd "L") "loadrc")

(defcommand dec-brightness () ()
  "brightness decrement"
  (run-shell-command "for i in {1..5}; do ~/bin/brightness/dec.sh; done"))
(define-key *root-map* (kbd "F5") "dec-brightness")

(defcommand inc-brightness () ()
  "brightness increment"
  (run-shell-command "for i in {1..5}; do ~/bin/brightness/inc.sh; done"))
(define-key *root-map* (kbd "F6") "inc-brightness")

(defcommand top () ()
  "Display a single 'top' frame."
  (shell-command "top -b -n 1 -c -d 1"))

(define-key *root-map* (kbd "^") "top")

;; Frame selection
(define-key *root-map* (kbd "o") "fselect")

;; Firefox
(defprogram-shortcut :firefox :command "firefox"
                     :props '(:class "Firefox")
                     :map *root-map* :key (kbd "f"))

;; Another way to declare a shortcut for launching google-chrome
(defprogram-shortcut :chrome :command "chromium-browser"
                     :props '(:instance "chromium-browser")
                     :map *root-map* :key (kbd "b"))

;; Another way to declare a shortcut for launching google-chrome
(defprogram-shortcut :chrome :command "google-chrome --no-proxy-server"
                     :props '(:instance "google-chrome")
                     :map *root-map* :key (stumpwm:kbd "C-b"))

;; Conkeror - keyboard-driven navigator - C-t c
(defprogram-shortcut :conkeror :command "conkeror"
                     :props '(:class "Conkeror")
                     :map *root-map* :key (kbd "c"))

;; IDE to the keybinding i (C-t i)
(defprogram-shortcut :eclipse :command "~/bin/ide/eclipse.sh"
                     :props '(:class "Eclipse")
                     :map *root-map* :key (kbd "i"))

;; Gnome-control-center (C-t ,)
(defprogram-shortcut :gnome-control-center :command "gnome-control-center"
                     :props '(:class "Gnome-Control-Center")
                     :map *root-map* :key (kbd ","))

;; Totem (C-t .)
(defprogram-shortcut :video-player :command "totem"
                     :props '(:class "Totem")
                     :map *root-map* :key (kbd "."))

;; Intellij-idea (C-t j)
(defprogram-shortcut :intellij-idea :command "~/applications/idea/bin/idea.sh"
                     :props '(:class "jetbrains-idea-ce")
                     :map *root-map* :key (kbd "j"))

;; File explorer nautilus (C-t n)
(defprogram-shortcut :nautilus :command "nautilus"
                     :props '(:instance "nautilus")
                     :map *root-map* :key (kbd "n"))

;; Transmission-gtk (C-t /)
(defprogram-shortcut :torrent :command "transmission-gtk"
                     :props '(:instance "transmission-gtk")
                     :map *root-map* :key (kbd "/"))

;; PDF reader evince (C-t C-e)
(defprogram-shortcut :evince :command "evince"
                     :props '(:instance "evince")
                     :map *root-map* :key (stumpwm:kbd "C-e"))

;; Image reader eog (C-t C-o)
(defprogram-shortcut :eog :command "eog"
                     :props '(:instance "eog")
                     :map *root-map* :key (stumpwm:kbd "C-o"))

;; Add a binding for gnome-screenshot (C-t C-s)
(defprogram-shortcut :screenshot :command "gnome-screenshot"
                     :props '(:instance "gnome-screenshot")
                     :map *root-map* :key (stumpwm:kbd "C-s"))

;; yEd (C-t y)
(defprogram-shortcut :yEd :command "~/bin/app/yed.sh"
                     :props '(:instance "sun-awt-X11-XFramePeer")
                     :map *root-map* :key (kbd "y"))

;; arduino ide (C-t C-c)
(defprogram-shortcut :arduino :command "arduino"
                     :props '(:class "processing-app-Base")
                     :map *root-map* :key (stumpwm:kbd "C-c"))

;; pinta - lightweight drawing soft (C-t d)
(defprogram-shortcut :pinta :command "pinta"
                     :props '(:instance "Pinta")
                     :map *root-map* :key (kbd "d"))

;; gimp - not so lightweight drawing soft (C-t C-d)
(defprogram-shortcut :gimp :command "gimp"
                     :props '(:instance "gimp")
                     :map *root-map* :key (stumpwm:kbd "C-d"))

;; fritzing (C-t C-f)
(defprogram-shortcut :fritzing :command "~/applications/fritzing/Fritzing"
                     :props '(:instance "Fritzing")
                     :map *root-map* :key (stumpwm:kbd "C-f"))

;; Virtualbox (C-t C-v)
(defprogram-shortcut :virtualbox :command "virtualbox"
                     :props '(:instance "Qt-subapplication")
                     :map *root-map* :key (stumpwm:kbd "C-v"))

;;Set the mouse focus policy to ignore the mouse
(setf *mouse-focus-policy* :ignore) ;; :click, :ignore, :sloppy

;; Launch commands
(run-shell-command "/usr/bin/gnome-settings-daemon")
(run-shell-command "killall nm-applet && /usr/bin/nm-applet &")
(run-shell-command "/usr/bin/bluetooth-applet &")
(run-shell-command "/usr/bin/pactl load-module module-x11-xsmp &")
(run-shell-command "gnome-power-manager")
(run-shell-command "gnome-panel --replace &")
(run-shell-command "dropbox start")
(run-shell-command "nautilus --no-default-window")
;; start an emacs server in background
(run-shell-command "emacs --daemon &")
(terminal)
