;; -*- lisp -*-

(load "~/quicklisp/setup.lisp");; lisp package manager loading
(ql:quickload :fset)

(in-package :stumpwm)
(use-package :ql-clj)

(setf *frame-number-map* "abcdefghijklmnopqrst")

(setf *window-format* "%m%n%s nm=%50t cl=%c id=%i")

;;; Window Appearance
;; The width in pixels given to the borders of regular windows.
(setf *normal-border-width* 0)
;; The width in pixels given to the borders of windows with maxsize or ratio hints.
(setf *maxsize-border-width* 0)
;; The width in pixels given to the borders of transient or pop-up windows.
(setf *transient-border-width* 0)

;;(run-commands "restore-from-file ~/.stumpwm.screendump")

;; (load "/usr/share/common-lisp/source/slime/swank-loader.lisp")
;; (swank-loader:init)

;; (defcommand swank () ()
;;   (setf stumpwm:*top-level-error-action* :break)
;;   (swank:create-server :port 4005
;;                        :style swank:*communication-style*
;;                        :dont-close t)
;;   (echo-string (current-screen)
;;                "Starting swank. M-x slime-connect RET RET, then (in-package stumpwm)."))
;; (swank)

(defun shell-command (command)
  "Run a shell command and display output to screen.
   This must be used in a functional side-effects-free style!
   If a program does not exit, Stumpwm might hang!"
  (check-type command string)
  (echo-string (current-screen) (run-shell-command command t)))

(defun run-shl (&rest cmd)
  "A simpler command to run-shell-command with multiple params"
  (run-shell-command (apply #'concatenate 'string cmd)))

;; ----------------- personal functions

(defun toggle-touchpad-manual (status)
  "Activate/Deactivate the touchpad depending on the status parameter (0/1)."
  (run-shl "~/bin/stumpwm/toggle-touchpad-manual.sh " status)
  ;; banish the mouse from the screen when we deactivate the touchpad
  (if (equal "0" status) (stumpwm::banish)))

(defmacro roraise-and-touchpad-off (command class)
  "Wrap a call to the run-or-raise command but before toggle off the touchpad (works with window class names)."
  `(progn
     (toggle-touchpad-manual "0")
     (run-or-raise ,command '(:class ,class))))

(defmacro roraise-and-touchpad-on (command class)
  "Wrap a call to the run-or-raise command but before toggle on the touchpad (works with window class name)."
  `(progn
     (toggle-touchpad-manual "1")
     (run-or-raise ,command '(:class ,class))))

(defmacro roraise-and-touchpad-on-instance (command instance)
  "Wrap a call to the run-or-raise command but before toggle off the touchpad - for the small software that deals better with the stumpwm instance property."
  `(progn
     (toggle-touchpad-manual "1")
     (run-or-raise ,command '(:instance ,instance))))

;; (defcommand name (args) (interactive-args) "doc-string" (body))
;; wrapper around the zenity cli
(defcommand zenity (command) ()
   "Wrap a call to the cli and output the result into a zenity window"
   (run-shl "zenity --info --text \"$(" command ")\""))

;; C-t T - Toggle on/off the touchpad
(defcommand toggle-touchpad-auto () ()
  "Activate/Deactivate automatically the touchpad depending on the current status."
  (run-shl "~/bin/stumpwm/toggle-touchpad.sh")
  (stumpwm::banish))
(define-key *root-map* (kbd "T") "toggle-touchpad-auto")

;; ----------------- run-shell-commands commands

;; C-t C-S
(defcommand suspend () ()
  "Suspend"
  (run-shell-command "gksudo pm-suspend"))
(define-key *root-map* (kbd "C-S") "suspend")

;; C-t C-H
(defcommand hibernate () ()
  "Hibernate"
  (run-shell-command "gksudo pm-hibernate"))
(define-key *root-map* (kbd "C-H") "hibernate")

;; C-t A - Load the identities from the ~/.ssh-agent-identities file
(defcommand ssh-add-identities () ()
  "Add the identities present in ~/.ssh-agent-identities script."
  (run-shell-command "~/bin/ssh/ssh-add.sh"))
(define-key *root-map* (kbd "A") "ssh-add-identities")

;; C-t p - Activate the proxy (ask for su rights)
(defcommand switch-to-proxy () ()
  "Switch to proxy."
  (run-shell-command "gksudo ~/bin/proxy/proxy.sh on && killall nm-applet"))
(define-key *root-map* (kbd "p") "switch-to-proxy")

;; C-t P - Deactivate the proxy
(defcommand switch-to-no-proxy () ()
  "Switch to no proxy."
  (run-shell-command "gksudo ~/bin/proxy/proxy.sh off && killall nm-applet"))
(define-key *root-map* (kbd "P") "switch-to-no-proxy")

;; C-t F6 - Decrement the brightness by 5
(defcommand dec-brightness () ()
  "Brightness decrement"
  (run-shell-command "~/bin/brightness/dec-brightness.sh 5"))
(define-key *root-map* (kbd "F5") "dec-brightness")

;; C-t F5 - Increment the brightness by 5
(defcommand inc-brightness () ()
  "Brightness increment"
  (run-shell-command "~/bin/brightness/inc-brightness.sh 5"))
(define-key *root-map* (kbd "F6") "inc-brightness")

;; C-t m - Min brightness
(defcommand min-brightness () ()
  "Minimum screen brightness"
  (run-shell-command "~/bin/brightness/min-brightness.sh"))
(define-key *root-map* (kbd "m") "min-brightness")

(defcommand half-brightness () ()
  "Half screen brightness"
  (run-shell-command "~/bin/brightness/half-brightness.sh"))
(define-key *root-map* (kbd "C-M") "half-brightness")

;; C-t M - Max brightness
(defcommand max-brightness () ()
  "Maximum screen brightness"
  (run-shell-command "~/bin/brightness/max-brightness.sh"))
(define-key *root-map* (kbd "M") "max-brightness")

;; C-t C-o - wifi off
(defcommand wifi-off () ()
  "wifi off"
  (run-shell-command "~/bin/wifi/wifi-off.sh"))
(define-key *root-map* (kbd "C-o") "wifi-off")

;; C-t O - wifi on
(defcommand wifi-on () ()
  "wifi on"
  (run-shell-command "~/bin/wifi/wifi-on.sh"))
(define-key *root-map* (kbd "O") "wifi-on")

;; C-t C-p - relaunch panel
(defcommand relaunch-panel () ()
  "Relaunch panel"
  (run-shell-command "~/bin/panel/relaunch-panel.sh"))
(define-key *root-map* (kbd "C-p") "relaunch-panel")

;; C-t ^ - top
(defcommand top () ()
  "Display a single 'top' frame."
  (shell-command "top -b -n 1 -c -d 1"))
(define-key *root-map* (kbd "^") "top")

;; C-t C-s - Take a snapshot for the current window
(defcommand screenshot () ()
  "Take a screenshot for the current window."
  (shell-command "/usr/bin/scrot -u $HOME/Pictures/screenshot_$(date +%F_%H-%M-%S).png"))
(define-key *root-map* (kbd "C-s") "screenshot")

;; C-t o - Frame selection
(define-key *root-map* (kbd "o") "fselect")

;; C-t L - Reload the ~/.stumpwmrc configuration
(define-key *root-map* (kbd "L") "loadrc")

;; C-t C-c - arduino ide
(defprogram-shortcut :arduino :command "arduino"
                     :props '(:class "processing-app-Base")
                     :map *root-map* :key (stumpwm:kbd "C-c"))

;;Set the mouse focus policy to ignore the mouse
(setf *mouse-focus-policy* :ignore) ;; :click, :ignore, :sloppy

(setf stumpwm-setup
  (-> (fset:empty-map)
      (fset:with :zenity             '((ssh-add-list2        "List the keys the user-agent holds"      "ssh-add -L"           "q")
                                       (cat-etc-environment2 "Display the content of /etc/environment" "cat /etc/environment" "E")
                                       (cat-etc-hosts        "Display the content of /etc/hosts"       "cat /etc/hosts"       "H")
                                       (sbin-ifconfig        "/sbin/ifconfig"                          "/sbin/ifconfig"       "I")
;;                                       (acpi-cmd             "Display battery"                         "/usr/bin/acpi -b"     "B")
                                       ))))

;; zenity - shell command with result inside a pop-up window

(defmacro zenity-cmd (fn-name doc-string command binding)
  `(progn
     (defcommand ,fn-name () ()
       ,doc-string
       (zenity ,command))
     (define-key *root-map* (kbd ,binding) (string-downcase (symbol-name ',fn-name)))))

;; (macroexpand-1
;;   '(zenity-cmd sshadd "list ssh identities held by agent" "ssh-add -L" "q"))
;; (macroexpand-1
;;  '(zenity-cmd cat-etc-environment  "Display the content of /etc/environment" "cat /etc/environment" "E"))
;; (macroexpand-1
;;  '(zenity-cmd acpi-cmd "Display battery" "/usr/bin/acpi -b" "B"))

(defun zenity-category (data)
  "Deal with zenity category"
  (mapcar
   (lambda (c)
     (destructuring-bind (fn doc cmd bdg) c
       (zenity-cmd fn doc cmd bdg)))
   data))

(defun zenity-category (data)
  "Deal with zenity category"
  (loop for (fn doc cmd bdg) in data
        collect (zenity-cmd fn doc cmd bdg)))

(zenity-category (fset:lookup stumpwm-setup :zenity))
(zenity-cmd ssh-add-list        "list ssh identities held by agent" "ssh-add -L" "q")
(zenity-cmd cat-etc-environment "Display the content of /etc/environment" "cat /etc/environment" "E")
(zenity-cmd  acpi-cmd           "Display battery" "/usr/bin/acpi -b" "B")

;; (macroexpand-1
;;   '(zenity-category (fset:lookup stumpwm-setup :zenity)))

;; ========================== Fixed binding

;; C-t i - IDE java (unfortunately)
;; (defcommand eclipse () ()
;;   "Run a eclipse instance or if already running, switch to it."
;;   (roraise-and-touchpad-on "~/bin/ide/eclipse.sh" "Eclipse"))
(define-key *root-map* (kbd "i") "xephyr")

;; C-t j - Intellij-idea
;; (defcommand intellij-idea () ()
;;   "Run a intellij-idea instance or if already running, switch to it."
;;   (roraise-and-touchpad-on "~/applications/idea/bin/idea.sh" "jetbrains-idea-ce"))
;;(define-key *root-map* (kbd "j") "xephyr")

;; ========================== Launch commands

(relaunch-panel)
(run-shell-command "/usr/bin/gnome-settings-daemon")
(run-shell-command "killall nm-applet && /usr/bin/nm-applet &")
(run-shell-command "/usr/bin/pactl load-module module-x11-xsmp &")

(run-shell-command "gnome-power-manager")
(run-shell-command "dropbox start")
(run-shell-command "nautilus --no-default-window")
;; start an emacs server in background
(run-shell-command "emacs --daemon &")
;;(terminal)
