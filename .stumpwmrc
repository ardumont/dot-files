;; -*- lisp -*-

(load "~/quicklisp/setup.lisp")
(ql:quickload :fset)
;; (ql:quickload :swank)
;; (ql:quickload :clx)
;; (ql:quickload :cl-ppcre)
;; (ql:quickload :stumpwm)

;; (defun swank ()
;;   (setf *top-level-error-action* :break)
;;   (swank:create-server :port 4005
;;                        :style swank:*communication-style*
;;                        :dont-close t)
;;   (echo-string (current-screen)
;;                "Starting swank. M-x slime-connect RET RET, then (in-package stumpwm)."))

;;(swank)

(in-package :stumpwm)

(use-package :ql-clj)

(setf *frame-number-map* "abcdefghijklmnopqrst")

(setf *window-format* "%m%n%s nm=%50t cl=%c id=%i")

;;; Window Appearance
;; The width in pixels given to the borders of regular windows.
(setf *normal-border-width* 0)
;; The width in pixels given to the borders of windows with maxsize or ratio hints.
(setf *maxsize-border-width* 0)
;; The width in pixels given to the borders of transient or pop-up windows.
(setf *transient-border-width* 0)

;;(run-commands "restore-from-file ~/.stumpwm.screendump")

(defun shell-command (command)
  "Run a shell command and display output to screen.
   This must be used in a functional side-effects-free style!
   If a program does not exit, Stumpwm might hang!"
  (check-type command string)
  (echo-string (current-screen) (run-shell-command command t)))

(defun run-shl (&rest cmd)
  "A simpler command to run-shell-command with multiple params"
  (run-shell-command (apply #'concatenate 'string cmd)))

;; ----------------- personal functions

(defun toggle-touchpad-manual (status)
  "Activate/Deactivate the touchpad depending on the status parameter (0/1)."
  (run-shl "~/bin/stumpwm/toggle-touchpad-manual.sh " status)
  ;; banish the mouse from the screen when we deactivate the touchpad
  (if (equal "0" status) (stumpwm::banish)))

(defmacro roraise-and-touchpad-off (command class)
  "Wrap a call to the run-or-raise command but before toggle off the touchpad (works with window class names)."
  `(progn
     (toggle-touchpad-manual "0")
     (run-or-raise ,command '(:class ,class))))

(defmacro roraise-and-touchpad-on (command class)
  "Wrap a call to the run-or-raise command but before toggle on the touchpad (works with window class name)."
  `(progn
     (toggle-touchpad-manual "1")
     (run-or-raise ,command '(:class ,class))))

(defmacro roraise-and-touchpad-on-instance (command instance)
  "Wrap a call to the run-or-raise command but before toggle off the touchpad - for the small software that deals better with the stumpwm instance property."
  `(progn
     (toggle-touchpad-manual "1")
     (run-or-raise ,command '(:instance ,instance))))

;; (defcommand name (args) (interactive-args) "doc-string" (body))
;; wrapper around the zenity cli
(defcommand zenity (command) ()
   "Wrap a call to the cli and output the result into a zenity window"
   (run-shl "zenity --info --text \"$(" command ")\""))

;; C-t T - Toggle on/off the touchpad
(defcommand toggle-touchpad-auto () ()
  "Activate/Deactivate automatically the touchpad depending on the current status."
  (run-shl "~/bin/stumpwm/toggle-touchpad.sh")
  (stumpwm::banish))
(define-key *root-map* (kbd "T") "toggle-touchpad-auto")

;; C-t o - Frame selection
(define-key *root-map* (kbd "o") "fselect")

;; C-t L - Reload the ~/.stumpwmrc configuration
(define-key *root-map* (kbd "L") "loadrc")

;; C-t C-c - arduino ide
(defprogram-shortcut :arduino :command "arduino"
                     :props '(:class "processing-app-Base")
                     :map *root-map* :key (stumpwm:kbd "C-c"))

;;Set the mouse focus policy to ignore the mouse
(setf *mouse-focus-policy* :ignore) ;; :click, :ignore, :sloppy

;; map over macro

(defmacro mapcro (macro args)
  "Iterate over a list of list of parameters and executes the macro 'macro' on such args."
  `(progn
     ,@(mapcar
        (lambda (&rest x) `(,macro ,@x)) args)))

;; zenity - shell command with result inside a pop-up window

(defmacro zenity-cmd (metacmd)
  (destructuring-bind (fn-name doc-string command binding) metacmd
    `(progn
       (defcommand ,fn-name () ()
         ,doc-string
         (zenity ,command))
       (define-key *root-map* (kbd ,binding) (string-downcase (symbol-name ',fn-name))))))

;; (macroexpand-1
;;  '(zenity-cmd (sshadd "list ssh identities held by agent" "ssh-add -L" "q")))

;; (macroexpand-1
;;  '(mapcro
;;    zenity-cmd
;;    ((ssh-add-list          "List the keys the user-agent holds"      "ssh-add -L"           "q")
;;     (cat-etc-environment10 "Display the content of /etc/environment" "cat /etc/environment" "E")
;;     (cat-etc-hosts10       "Display the content of /etc/hosts"       "cat /etc/hosts"       "H")
;;     (sbin-ifconfig10       "/sbin/ifconfig"                          "/sbin/ifconfig"       "I")
;;     (acpi-cmd10            "Display battery"                         "/usr/bin/acpi -b"     "B"))))

(defmacro zenity-category (data)
  `(mapcro zenity-cmd ,data))

;; ========================== run-or-raise-touchpad-off

(defmacro ror-touchpad-off-cmd (metacmd)
  (destructuring-bind (fn-name doc-string command class binding) metacmd
    `(progn
       (defcommand ,fn-name () ()
         ,doc-string
         (roraise-and-touchpad-off ,command ,class))
       (define-key *root-map* (kbd ,binding) (string-downcase (symbol-name ',fn-name))))))

(defmacro ror-tpd-off-category (data)
  `(mapcro ror-touchpad-off-cmd ,data))

;; ========================== run-or-raise-touchpad-off

(defmacro ror-touchpad-on-cmd (metacmd)
  (destructuring-bind (fn-name doc-string command class binding) metacmd
    `(progn
       (defcommand ,fn-name () ()
         ,doc-string
         (roraise-and-touchpad-on ,command ,class))
       (define-key *root-map* (kbd ,binding) (string-downcase (symbol-name ',fn-name))))))

(defmacro ror-tpd-on-category (data)
  `(mapcro ror-touchpad-on-cmd ,data))

;; ========================== run-or-raise-instance-touchpad-on

(defmacro ror-id-touchpad-on-cmd (metacmd)
  (destructuring-bind (fn-name doc-string command id binding) metacmd
    `(progn
       (defcommand ,fn-name () ()
         ,doc-string
         (roraise-and-touchpad-on-instance ,command ,id))
       (define-key *root-map* (kbd ,binding) (string-downcase (symbol-name ',fn-name))))))

(defmacro ror-id-tpd-on-category (data)
  `(mapcro ror-id-touchpad-on-cmd ,data))

;; ========================== run-shell-command

(defmacro run-shell-command-cmd (metacmd)
  (destructuring-bind (fn-name doc-string command binding) metacmd
    `(progn
       (defcommand ,fn-name () ()
         ,doc-string
         (run-shell-command ,command))
       (define-key *root-map* (kbd ,binding) (string-downcase (symbol-name ',fn-name))))))

(defmacro run-shell-command-category (data)
  `(mapcro run-shell-command-cmd ,data))

;; ========================== shell-command

(defmacro shell-command-cmd (metacmd)
  (destructuring-bind (fn-name doc-string command binding) metacmd
    `(progn
       (defcommand ,fn-name () ()
         ,doc-string
         (shell-command ,command))
       (define-key *root-map* (kbd ,binding) (string-downcase (symbol-name ',fn-name))))))

(defmacro shell-command-category (data)
  `(mapcro shell-command-cmd ,data))

;; ========================== setup

;; xenity - shell command with output inside a zenity popup window
(zenity-category ((ssh-add-12           "List the keys the user-agent holds"      "ssh-add -L"           "q")
                  (cat-etc-environment2 "Display the content of /etc/environment" "cat /etc/environment" "E")
                  (cat-etc-hosts        "Display the content of /etc/hosts"       "cat /etc/hosts"       "H")
                  (sbin-ifconfig        "/sbin/ifconfig"                          "/sbin/ifconfig"       "I")
                  (acpi-cmd             "Display battery"                         "/usr/bin/acpi -b"     "B")))

;; run-or-raise application based on the class name of the window + deactivating the touchpad
(ror-tpd-off-category
                 ((terminal             "terminal" "gnome-terminal --hide-menubar" "Gnome-terminal" "x")
                  (myemacs              "emacs"    "emacsclient -c"                "Emacs24"        "e")
                  (conkeror             "conkeror" "conkeror"                      "Conkeror"       "c")))

;; run-or-raise application based on the class name of the window + activating the touchpad
(ror-tpd-on-category
                 ((firefox              "firefox"              "firefox"                         "Firefox"                     "f")
                  (chromium-browser     "chrome"               "google-chrome --no-proxy-server" "Google-chrome"               "b")
                  (gnome-control-center "gnome-control-center" "gnome-control-center"            "Gnome-Control-Center"        ",")
                  (video-player         "totem"                "totem"                           "Totem"                       ".")
                  (evince               "evince"               "evince"                          "Evince"                      "C-e")
                  (eog                  "eog"                  "eog"                             "Eog"                         "C-i")
                  (pinta                "pinta"                "pinta"                           "Pinta"                       "d")
                  (gimp                 "gimp"                 "gimp"                            "Gimp"                        "C-d")
                  (skype                "skype"                "/usr/bin/skype"                  "Skype"                       "C-c")
                  (audacious            "audacious"            "/usr/bin/audacious"              "Audacious"                   "C-a")
                  (jconsole             "jconsole"             "/usr/bin/jconsole"               "sun-tools-jconsole-JConsole" "C-j")
                  (jvisualvm            "jvisualvm"            "/usr/bin/jvisualvm"              "java-lang-Thread"            "j")))

;; run-or-raise application based on the instance of the window + activating the touchpad
(ror-id-tpd-on-category
                 ((xephyr               "xephyr.sh"        "~/bin/xephyr/xephyr.sh"    "Xephyr"                 "C-x")
                  (wireshark            "wireshark"        "gksudo wireshark"          "wireshark"              "C-w")
                  (nautilus             "nautilus"         "nautilus"                  "nautilus"               "n")
                  (thunar               "thunar"           "thunar"                    "thunar"                 "N")
                  (yEd                  "yed"              "yed.sh"                    "sun-awt-X11-XFramePeer" "y")
                  (filezilla            "filezilla"        "/usr/bin/filezilla"        "filezilla"              "C-f")
                  (virtualbox           "virtualbox"       "virtualbox"                "Qt-subapplication"      "C-v")
                  (unetbootin           "unetbootin"       "unetbootin"                "unetbootin"             "u")
                  (transmission         "transmission-gtk" "/usr/bin/transmission-gtk" "transmission-gtk"       "/")
                  (gparted              "gparted"          "gksudo /usr/sbin/gparted"  "gpartedbin"             "G")
                  (file-progress        "file progress"    ""                          "file_progress"          "F")))

;; run shell command
(run-shell-command-category
                  ((suspend              "Suspend"                                                       "gksudo pm-suspend"                                    "C-S")
                   (hibernate            "Hibernate"                                                     "gksudo pm-hibernate"                                  "C-H")
                   (ssh-add-identities   "Add the identities present in ~/.ssh-agent-identities script." "~/bin/ssh/ssh-add.sh"                                 "A")
                   (switch-to-proxy      "Switch to proxy."                                              "gksudo ~/bin/proxy/proxy.sh on && killall nm-applet"  "p")
                   (switch-to-no-proxy   "Switch to no proxy."                                           "gksudo ~/bin/proxy/proxy.sh off && killall nm-applet" "P")
                   (dec-brightness       "Brightness decrement"                                          "~/bin/brightness/dec-brightness.sh 5"                 "F5")
                   (inc-brightness       "Brightness increment"                                          "~/bin/brightness/inc-brightness.sh 5"                 "F6")
                   (min-brightness       "Minimum screen brightness"                                     "~/bin/brightness/min-brightness.sh"                   "m")
                   (half-brightness      "Half screen brightness"                                        "~/bin/brightness/half-brightness.sh"                  "C-M")
                   (max-brightness       "Maximum screen brightness"                                     "~/bin/brightness/max-brightness.sh"                   "M")
                   (wifi-off             "wifi off"                                                      "~/bin/wifi/wifi-off.sh"                               "C-o")
                   (wifi-on              "wifi on"                                                       "~/bin/wifi/wifi-on.sh"                                "O")
                   (relaunch-panel       "Relaunch panel"                                                "~/bin/panel/relaunch-panel.sh"                        "C-p")))

(shell-command-category
                 ((top                  "Display a single 'top' frame."             "top -b -n 1 -c -d 1"                                                  "^")
                  (screenshot           "Take a screenshot for the current window." "/usr/bin/scrot -u $HOME/Pictures/screenshot_$(date +%F_%H-%M-%S).png" "C-s")))

;; ========================== Fixed binding

;; C-t i - IDE java (unfortunately)
;; (defcommand eclipse () ()
;;   "Run a eclipse instance or if already running, switch to it."
;;   (roraise-and-touchpad-on "~/bin/ide/eclipse.sh" "Eclipse"))
(define-key *root-map* (kbd "i") "xephyr")

;; C-t j - Intellij-idea
;; (defcommand intellij-idea () ()
;;   "Run a intellij-idea instance or if already running, switch to it."
;;   (roraise-and-touchpad-on "~/applications/idea/bin/idea.sh" "jetbrains-idea-ce"))
;;(define-key *root-map* (kbd "j") "xephyr")

;; ========================== Launch commands

(relaunch-panel)
(run-shell-command "/usr/bin/gnome-settings-daemon")
(run-shell-command "killall nm-applet && /usr/bin/nm-applet &")
(run-shell-command "/usr/bin/pactl load-module module-x11-xsmp &")

(run-shell-command "gnome-power-manager")
(run-shell-command "dropbox start")
(run-shell-command "nautilus --no-default-window")
;; start an emacs server in background
(run-shell-command "emacs --daemon &")
;;(terminal)
