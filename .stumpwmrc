;; -*- lisp -*-

;; ========================== Loading dependency libraries

(load "~/quicklisp/setup.lisp")

;; ========================== Debugging properties (uncomment first)

;; (ql:quickload :swank)
;; (ql:quickload :clx)
;; (ql:quickload :cl-ppcre)
;; (ql:quickload :stumpwm)

;; (defun swank ()
;;   (setf *top-level-error-action* :break)
;;   (swank:create-server :port 4005
;;                        :style swank:*communication-style*
;;                        :dont-close t)
;;   (echo-string (current-screen)
;;                "Starting swank. M-x slime-connect RET RET, then (in-package stumpwm)."))

;;(swank)

;; ========================== Beginning setup of stumpwm

(in-package :stumpwm)
(use-package :ql-clj)
(load "~/.stumpwm-functions.lisp")

(setf *frame-number-map* "abcdefghijklmnopqrst")

(setf *window-format* "%m%n%s nm=%50t cl=%c id=%i")

;;; Window Appearance
;; The width in pixels given to the borders of regular windows.
(setf *normal-border-width* 0)
;; The width in pixels given to the borders of windows with maxsize or ratio hints.
(setf *maxsize-border-width* 0)
;; The width in pixels given to the borders of transient or pop-up windows.
(setf *transient-border-width* 0)

;;(run-commands "restore-from-file ~/.stumpwm.screendump")

;;Set the mouse focus policy to ignore the mouse
(setf *mouse-focus-policy* :ignore) ;; :click, :ignore, :sloppy

;; ========================== setup

;; xenity - shell command with output inside a zenity popup window
(zenity-category
 ((ssh-add-list         "List the keys the user-agent holds"      "ssh-add -L"           "K")
  (cat-etc-environment  "Display the content of /etc/environment" "cat /etc/environment" "E")
  (cat-etc-hosts        "Display the content of /etc/hosts"       "cat /etc/hosts"       "H")
  (sbin-ifconfig        "/sbin/ifconfig"                          "/sbin/ifconfig"       "I")
  (acpi-cmd             "Display battery"                         "/usr/bin/acpi -b"     "B")))

;; run-or-raise application based on the class name of the window + deactivating the touchpad
(ror-tpd-off-category
 ((terminal             "terminal" "gnome-terminal --hide-menubar" "Gnome-terminal" "x")
  (myemacs              "emacs"    "emacsclient -c"                "Emacs24"        "e")
  (conkeror             "conkeror" "conkeror"                      "Conkeror"       "c")))

;; run-or-raise application based on the class name of the window + activating the touchpad
(ror-tpd-on-category
 ((firefox              "firefox"              "firefox"                         "Firefox"                     "f")
  (chromium-browser     "chrome"               "google-chrome --no-proxy-server" "Google-chrome"               "b")
  (gnome-control-center "gnome-control-center" "gnome-control-center"            "Gnome-Control-Center"        ",")
  (video-player         "totem"                "totem"                           "Totem"                       ".")
  (evince               "evince"               "evince"                          "Evince"                      "C-e")
  (eog                  "eog"                  "eog"                             "Eog"                         "C-i")
  (pinta                "pinta"                "pinta"                           "Pinta"                       "d")
  (gimp                 "gimp"                 "gimp"                            "Gimp"                        "C-d")
  (skype                "skype"                "/usr/bin/skype"                  "Skype"                       "C-c")
  (audacious            "audacious"            "/usr/bin/audacious"              "Audacious"                   "C-a")
  (jconsole             "jconsole"             "/usr/bin/jconsole"               "sun-tools-jconsole-JConsole" "C-j")
  (jvisualvm            "jvisualvm"            "/usr/bin/jvisualvm"              "java-lang-Thread"            "j")
  (arduino              "arduino ide"          "arduino"                         "processing-appBase"          "C-c")
  ;; (intellij-idea        "intellij-idea"        "~/bin/ide/idea.sh"               "jetbrains-idea-ce"           "j")
  ;; (eclipse              "eclipse ide"          "~/bin/ide/eclipse.sh"            "Eclipse"                     "i")
  ))

;; run-or-raise application based on the instance of the window + activating the touchpad
(ror-id-tpd-on-category
 ((xephyr               "xephyr.sh"        "~/bin/xephyr/xephyr.sh"    "Xephyr"                 "C-x")
  (wireshark            "wireshark"        "gksudo wireshark"          "wireshark"              "C-w")
  (nautilus             "nautilus"         "nautilus"                  "nautilus"               "n")
  (thunar               "thunar"           "thunar"                    "thunar"                 "N")
  (yEd                  "yed"              "yed.sh"                    "sun-awt-X11-XFramePeer" "y")
  (filezilla            "filezilla"        "/usr/bin/filezilla"        "filezilla"              "C-f")
  (virtualbox           "virtualbox"       "virtualbox"                "Qt-subapplication"      "C-v")
  (unetbootin           "unetbootin"       "unetbootin"                "unetbootin"             "u")
  (transmission         "transmission-gtk" "/usr/bin/transmission-gtk" "transmission-gtk"       "/")
  (gparted              "gparted"          "gksudo /usr/sbin/gparted"  "gpartedbin"             "G")
  (file-progress        "file progress"    ""                          "file_progress"          "F")))

;; run shell command - Simply execute shell command
(run-shell-command-category
 ((suspend              "Suspend"                                                       "gksudo pm-suspend"                                    "C-S")
  (hibernate            "Hibernate"                                                     "gksudo pm-hibernate"                                  "C-H")
  (ssh-add-identities   "Add the identities present in ~/.ssh-agent-identities script." "~/bin/ssh/ssh-add.sh"                                 "A")
  (switch-to-proxy      "Switch to proxy."                                              "gksudo ~/bin/proxy/proxy.sh on && killall nm-applet"  "p")
  (switch-to-no-proxy   "Switch to no proxy."                                           "gksudo ~/bin/proxy/proxy.sh off && killall nm-applet" "P")
  (dec-brightness       "Brightness decrement"                                          "~/bin/brightness/dec-brightness.sh 5"                 "F5")
  (inc-brightness       "Brightness increment"                                          "~/bin/brightness/inc-brightness.sh 5"                 "F6")
  (min-brightness       "Minimum screen brightness"                                     "~/bin/brightness/min-brightness.sh"                   "m")
  (half-brightness      "Half screen brightness"                                        "~/bin/brightness/half-brightness.sh"                  "C-M")
  (max-brightness       "Maximum screen brightness"                                     "~/bin/brightness/max-brightness.sh"                   "M")
  (wifi-off             "wifi off"                                                      "~/bin/wifi/wifi-off.sh"                               "C-o")
  (wifi-on              "wifi on"                                                       "~/bin/wifi/wifi-on.sh"                                "O")
  (relaunch-panel       "Relaunch panel"                                                "~/bin/panel/relaunch-panel.sh"                        "C-p")
  (evince-haskell-prog  "read functional approach in haskell"                           "evince \"/home/tony/books/haskell/Algorithms - A Functional Programming HASKELL Approach.pdf\"" "'")))

;; shell command - Simply execute shell command and possibly output the result in the screen
(shell-command-category
 ((top                  "Display a single 'top' frame."             "top -b -n 1 -c -d 1"                                                  "^")
  (screenshot           "Take a screenshot for the current window." "/usr/bin/scrot -u $HOME/Pictures/screenshot_$(date +%F_%H-%M-%S).png" "C-s")))

;; (defun toggle-mode-line-hook (key key-seq cmd)
;;   (declare (ignore key key-seq cmd))
;;   (stumpwm::mode-line))

;; (add-hook *key-press-hook* 'toggle-mode-line-hook)

;; Turn on the modeline
;; (if (not (head-mode-line (current-head)))
;;      (toggle-mode-line (current-screen) (current-head)))

;; ;; Show time, cpu usage and network traffic in the modeline
;; (setf *screen-mode-line-format*
;;       (list '(:eval (run-shell-command "date '+%R, %F %a'|tr -d [:cntrl:]" t)) " | %t | %c| %l | [^B%n^b] %W"))

;; ========================== simple binding

(define-key *root-map* (kbd "o") "fselect")

(define-key *root-map* (kbd "L") "loadrc")

(define-key *root-map* (kbd "C-L") "quit")

(define-key *root-map* (kbd "i") "xephyr");; old eclipse binding

;; ========================== Launch commands at startup time

(relaunch-panel)
(run-shell-command "/usr/bin/gnome-settings-daemon")
(run-shell-command "killall nm-applet && /usr/bin/nm-applet &")
(run-shell-command "/usr/bin/pactl load-module module-x11-xsmp &")

(run-shell-command "gnome-power-manager")
(run-shell-command "dropbox start")
(run-shell-command "nautilus --no-default-window")
;; start an emacs server in background
(run-shell-command "emacs --daemon &")
(terminal)
