;; Hey, Emacs! This is a -*- lisp -*- file!

(setf *frame-number-map* "abcdefghijklmnopqrst")

(setf *window-format* "%m%n%s nm=%50t cl=%c id=%i")

;;(run-commands "restore-from-file ~/.stumpwm.screendump")

(defcommand terminal () ()
  "run an xterm instance or switch to it, if it is already running."
  (run-or-raise "gnome-terminal --title=xterm1 --hide-menubar" '(:class "Gnome-terminal")))
(define-key *root-map* (kbd "x") "terminal")

(defcommand ssh-add-identities () ()
  "Add the identities present in ~/.ssh-agent-identities script."
  (run-shell-command "~/bin/ssh/ssh-add.sh"))
(define-key *root-map* (kbd "A") "ssh-add-identities")

(defcommand ssh-add-list () ()
  "run the ~/bin/ssh-add.sh script."
  (run-shell-command "zenity --info --text \"$(ssh-add -L)\""))
(define-key *root-map* (kbd "B") "ssh-add-list")

(defcommand cat-etc-environment () ()
  "Display the content of the file /etc/environment."
  (run-shell-command "zenity --info --text \"$(cat /etc/environment)\""))
(define-key *root-map* (kbd "E") "cat-etc-environment")

;; Frame selection
(define-key *root-map* (kbd "o") "fselect")

;; Emacs command
(defprogram-shortcut :emacs :command "emacsclient -c"
                     :props '(:class "Emacs")
                     :map *root-map* :key (kbd "e"))

;; Firefox
(defprogram-shortcut :firefox :command "firefox"
                     :props '(:class "Firefox")
                     :map *root-map* :key (kbd "f"))

;; Another way to declare a shortcut for launching google-chrome
(defprogram-shortcut :chrome :command "chromium-browser"
                     :props '(:instance "chromium-browser")
                     :map *root-map* :key (kbd "b"))

;; Another way to declare a shortcut for launching google-chrome
(defprogram-shortcut :chrome :command "google-chrome --no-proxy-server"
                     :props '(:instance "google-chrome")
                     :map *root-map* :key (stumpwm:kbd "C-b"))

;; Conkeror - keyboard-driven navigator - C-t c
(defprogram-shortcut :conkeror :command "conkeror"
                     :props '(:class "Conkeror")
                     :map *root-map* :key (kbd "c"))

;; IDE to the keybinding i (C-t i)
(defprogram-shortcut :eclipse :command "~/bin/ide/eclipse.sh"
                     :props '(:class "Eclipse")
                     :map *root-map* :key (kbd "i"))

;; Gnome-control-center (C-t ,)
(defprogram-shortcut :gnome-control-center :command "gnome-control-center"
                     :props '(:class "Gnome-Control-Center")
                     :map *root-map* :key (kbd ","))

;; Totem (C-t .)
(defprogram-shortcut :video-player :command "totem"
                     :props '(:class "Totem")
                     :map *root-map* :key (kbd "."))

;; Intellij-idea (C-t j)
(defprogram-shortcut :intellij-idea :command "~/applications/idea/bin/idea.sh"
                     :props '(:class "jetbrains-idea-ce")
                     :map *root-map* :key (kbd "j"))

;; File explorer nautilus (C-t n)
(defprogram-shortcut :nautilus :command "nautilus"
                     :props '(:instance "nautilus")
                     :map *root-map* :key (kbd "n"))

;; Transmission-gtk (C-t /)
(defprogram-shortcut :torrent :command "transmission-gtk"
                     :props '(:instance "transmission-gtk")
                     :map *root-map* :key (kbd "/"))

;; PDF reader evince (C-t C-e)
(defprogram-shortcut :evince :command "evince"
                     :props '(:instance "evince")
                     :map *root-map* :key (stumpwm:kbd "C-e"))

;; Image reader eog (C-t C-o)
(defprogram-shortcut :eog :command "eog"
                     :props '(:instance "eog")
                     :map *root-map* :key (stumpwm:kbd "C-o"))

;; Add a binding for gnome-screenshot (C-t C-s)
(defprogram-shortcut :screenshot :command "gnome-screenshot"
                     :props '(:instance "gnome-screenshot")
                     :map *root-map* :key (stumpwm:kbd "C-s"))

;; yEd (C-t y)
(defprogram-shortcut :yEd :command "~/bin/app/yed.sh"
                     :props '(:instance "sun-awt-X11-XFramePeer")
                     :map *root-map* :key (kbd "y"))

;; arduino ide (C-t C-c)
(defprogram-shortcut :arduino :command "arduino"
                     :props '(:class "processing-app-Base")
                     :map *root-map* :key (stumpwm:kbd "C-c"))

;; fritzing (C-t C-f)
(defprogram-shortcut :fritzing :command "~/applications/fritzing/Fritzing"
                     :props '(:instance "Fritzing")
                     :map *root-map* :key (stumpwm:kbd "C-f"))

;; Virtualbox (C-t C-v)
(defprogram-shortcut :virtualbox :command "virtualbox"
                     :props '(:instance "Qt-subapplication")
                     :map *root-map* :key (stumpwm:kbd "C-v"))

;;Set the mouse focus policy to ignore the mouse
(setf *mouse-focus-policy* :ignore) ;; :click, :ignore, :sloppy

;; Launch commands
(run-shell-command "/usr/bin/gnome-settings-daemon")
(run-shell-command "/usr/bin/nm-applet &")
(run-shell-command "/usr/bin/bluetooth-applet &")
(run-shell-command "/usr/bin/pactl load-module module-x11-xsmp &")
(run-shell-command "gnome-power-manager")
(run-shell-command "gnome-panel &")
(run-shell-command "dropbox start")
(run-shell-command "nautilus --no-default-window")
;; start an emacs server in background
(run-shell-command "emacs --daemon &")
(terminal)
