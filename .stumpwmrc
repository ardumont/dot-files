;; Hey, Emacs! This is a -*- lisp -*- file!

(setf *frame-number-map* "abcdefghijklmnopqrst")

(setf *window-format* "%m%n%s nm=%50t cl=%c id=%i")

;;; Window Appearance
;; The width in pixels given to the borders of regular windows.
(setf *normal-border-width* 0)
;; The width in pixels given to the borders of windows with maxsize or ratio hints.
(setf *maxsize-border-width* 0)
;; The width in pixels given to the borders of transient or pop-up windows.
(setf *transient-border-width* 0)

;;(run-commands "restore-from-file ~/.stumpwm.screendump")

(in-package :stumpwm)

;; (load "/usr/share/common-lisp/source/slime/swank-loader.lisp")
;; (swank-loader:init)

;; (defcommand swank () ()
;;   (setf stumpwm:*top-level-error-action* :break)
;;   (swank:create-server :port 4005
;;                        :style swank:*communication-style*
;;                        :dont-close t)
;;   (echo-string (current-screen)
;;                "Starting swank. M-x slime-connect RET RET, then (in-package stumpwm)."))
;; (swank)

(defun shell-command (command)
  "Run a shell command and display output to screen.
   This must be used in a functional side-effects-free style!
   If a program does not exit, Stumpwm might hang!"
  (check-type command string)
  (echo-string (current-screen) (run-shell-command command t)))

(defun run-shl (&rest cmd)
  "A simpler command to run-shell-command with multiple params"
  (run-shell-command (apply #'concatenate 'string cmd)))

;; ----------------- personal functions

(defun toggle-touchpad-manual (status)
  "Activate/Deactivate the touchpad depending on the status parameter (0/1)."
  (run-shl "~/bin/stumpwm/toggle-touchpad-manual.sh " status)
  ;; banish the mouse from the screen when we deactivate the touchpad
  (if (equal "0" status) (stumpwm::banish)))

(defmacro roraise-and-touchpad-off (command class)
  "Wrap a call to the run-or-raise command but before toggle off the touchpad."
  `(progn
     (toggle-touchpad-manual "0")
     (run-or-raise ,command '(:class ,class))))

(defmacro roraise-and-touchpad-on (command class)
  "Wrap a call to the run-or-raise command but before toggle off the touchpad."
  `(progn
     (toggle-touchpad-manual "1")
     (run-or-raise ,command '(:class ,class))))

(defmacro roraise-and-touchpad-on-instance (command instance)
  "Wrap a call to the run-or-raise command but before toggle off the touchpad - for the small software that deals better with the stumpwm instance property."
  `(progn
     (toggle-touchpad-manual "1")
     (run-or-raise ,command '(:instance ,instance))))

;; (defcommand name (args) (interactive-args) "doc-string" (body))
;; wrapper around the zenity cli
(defcommand zenity (command) ()
   "Wrap a call to the cli and output the result into a zenity window"
   (run-shl "zenity --info --text \"$(" command ")\""))

;; ----------------- personal functions

;; C-t T - Toggle on/off the touchpad
(defcommand toggle-touchpad-auto () ()
  "Activate/Deactivate automatically the touchpad depending on the current status."
  (run-shl "~/bin/stumpwm/toggle-touchpad.sh")
  (stumpwm::banish))
(define-key *root-map* (kbd "T") "toggle-touchpad-auto")

;; ----------------- zenity commands

;; C-t K - Display the keys the user-agent holds
(defcommand ssh-add-list () ()
  "run the ~/bin/ssh-add.sh script."
  (zenity "ssh-add -L"))
(define-key *root-map* (kbd "K") "ssh-add-list")

;; C-t E - Display the contents of the /etc/environment
(defcommand cat-etc-environment () ()
  "Display the content of the file /etc/environment."
  (zenity "cat /etc/environment"))
(define-key *root-map* (kbd "E") "cat-etc-environment")

;; C-t H - Display the contents of /etc/hosts
(defcommand cat-etc-hosts () ()
  "cat /etc/hosts"
  (zenity "cat /etc/hosts"))
(define-key *root-map* (kbd "H") "cat-etc-hosts")

;; C-t I - Display the network properties
(defcommand sbin-ifconfig () ()
  "/sbin/ifconfig"
  (zenity "/sbin/ifconfig"))
(define-key *root-map* (kbd "I") "sbin-ifconfig")

;; C-t B - Display the battery stat
(defcommand acpi-cmd () ()
  "acpi -b"
  (zenity "/usr/bin/acpi -b"))
(define-key *root-map* (kbd "B") "acpi-cmd")

;; ----------------- run-or-raise commands

;; (defcommand TEMPLATE () ()
;;   "Run a TEMPLATE instance or if already running, switch to it."
;;   (roraise-and-touchpad-on "COMMAND" "CLASS"))
;; (define-key *root-map* (kbd "KEYBOARD") "TEMPLATE")

;; C-t x - Terminal and switch off the touchpad
(defcommand terminal () ()
  "Run an xterm instance or if already running, switch to it."
  (roraise-and-touchpad-off "gnome-terminal --hide-menubar" "Gnome-terminal"))
(define-key *root-map* (kbd "x") "terminal")

;; C-t e - Emacs and switch off the touchpad
(defcommand myemacs () ()
  "Run an xterm instance or if already running, switch to it."
  ;; raise emacs
  (roraise-and-touchpad-off "emacsclient -c" "Emacs24"))
(define-key *root-map* (kbd "e") "myemacs")

;; C-t c - Conkeror - keyboard-driven navigator
(defcommand conkeror () ()
  "Run a conkeror instance or if already running, switch to it."
  ;; raise emacs
  (roraise-and-touchpad-off "conkeror" "Conkeror"))
(define-key *root-map* (kbd "c") "conkeror")

;; C-t f - Firefox
(defcommand firefox () ()
  "Run a firefox instance or if already running, switch to it."
  (roraise-and-touchpad-on "firefox" "Firefox"))
(define-key *root-map* (kbd "f") "firefox")

;; C-t b - Chromium
(defcommand chromium-browser () ()
  "Run a chromium instance or if already running, switch to it."
  (roraise-and-touchpad-on "chromium-browser" "Chromium-browser"))
(define-key *root-map* (kbd "C-b") "chromium-browser")

;; C-t C-b - Google-chrome
(defcommand google-chrome () ()
  "Run a google-chrome instance or if already running, switch to it."
  (roraise-and-touchpad-on "google-chrome --no-proxy-server" "Google-chrome"))
(define-key *root-map* (kbd "b") "google-chrome")

;; C-t , - Gnome-control-center
(defcommand gnome-control-center () ()
  "Run a gnome-control-center instance or if already running, switch to it."
  (roraise-and-touchpad-on "gnome-control-center" "Gnome-Control-Center"))
(define-key *root-map* (kbd ",") "gnome-control-center")

;; C-t i - IDE java (unfortunately)
(defcommand eclipse () ()
  "Run a eclipse instance or if already running, switch to it."
  (roraise-and-touchpad-on "~/bin/ide/eclipse.sh" "Eclipse"))
(define-key *root-map* (kbd "i") "eclipse")

;; C-t n - File explorer nautilus
(defcommand nautilus () ()
  "Run a nautilus instance or if already running, switch to it."
  (roraise-and-touchpad-on-instance "nautilus" "nautilus"))
(define-key *root-map* (kbd "n") "nautilus")

;; C-t n - File explorer thunar
(defcommand thunar () ()
  "Run a nautilus instance or if already running, switch to it."
  (roraise-and-touchpad-on-instance "thunar" "thunar"))
(define-key *root-map* (kbd "n") "thunar")

;; C-t j - Intellij-idea
(defcommand intellij-idea () ()
  "Run a intellij-idea instance or if already running, switch to it."
  (roraise-and-touchpad-on "~/applications/idea/bin/idea.sh" "jetbrains-idea-ce"))
(define-key *root-map* (kbd "j") "intellij-idea")

;; C-t . - video player
(defcommand video-player () ()
  "Run a video-player instance or if already running, switch to it."
  (roraise-and-touchpad-on "totem" "Totem"))
(define-key *root-map* (kbd ".") "video-player")

;; C-t C-e - PDF reader evince
(defcommand evince () ()
  "Run a evince instance or if already running, switch to it."
  (roraise-and-touchpad-on "evince" "Evince"))
(define-key *root-map* (kbd "C-e") "evince")

;; C-t C-i - Image reader eog
(defcommand eog () ()
  "Run a eog instance or if already running, switch to it."
  (roraise-and-touchpad-on "eog" "Eog"))
(define-key *root-map* (kbd "C-i") "eog")

;; C-t y - yEd
(defcommand yEd () ()
  "Run a yEd instance or if already running, switch to it."
  (roraise-and-touchpad-on-instance "yed.sh" "sun-awt-X11-XFramePeer"))
(define-key *root-map* (kbd "y") "yed")

;; C-t d - pinta - lightweight drawing soft
(defcommand pinta () ()
  "Run a pinta instance or if already running, switch to it."
  (roraise-and-touchpad-on "pinta" "Pinta"))
(define-key *root-map* (kbd "d") "pinta")

;; C-t C-d - gimp - not so lightweight drawing soft
(defcommand gimp () ()
  "Run a gimp instance or if already running, switch to it."
  (roraise-and-touchpad-on "gimp" "Gimp"))
(define-key *root-map* (kbd "C-d") "gimp")

;; C-t C-f - fritzing
(defcommand fritzing () ()
  "Run a fritzing instance or if already running, switch to it."
  (roraise-and-touchpad-on "~/applications/fritzing/Fritzing" "Fritzing"))
(define-key *root-map* (kbd "C-f") "fritzing")

;; C-t C-v - Virtualbox
(defcommand virtualbox () ()
  "Run a virtualbox instance or if already running, switch to it."
  (roraise-and-touchpad-on-instance "virtualbox" "Qt-subapplication"))
(define-key *root-map* (kbd "C-v") "virtualbox")

;; C-t C-c - skype
(defcommand skype () ()
  "Run a skype instance or if already running, switch to it."
  (roraise-and-touchpad-on "/usr/bin/skype" "Skype"))
(define-key *root-map* (kbd "C-c") "skype")

;; ----------------- run-shell-commands commands

;; C-t A - Load the identities from the ~/.ssh-agent-identities file
(defcommand ssh-add-identities () ()
  "Add the identities present in ~/.ssh-agent-identities script."
  (run-shell-command "~/bin/ssh/ssh-add.sh"))
(define-key *root-map* (kbd "A") "ssh-add-identities")

;; C-t p - Activate the proxy (ask for su rights)
(defcommand switch-to-proxy () ()
  "Switch to proxy."
  (run-shell-command "gksudo ~/bin/proxy/proxy.sh on && killall nm-applet"))
(define-key *root-map* (kbd "p") "switch-to-proxy")

;; C-t P - Deactivate the proxy
(defcommand switch-to-no-proxy () ()
  "Switch to no proxy."
  (run-shell-command "gksudo ~/bin/proxy/proxy.sh off && killall nm-applet"))
(define-key *root-map* (kbd "P") "switch-to-no-proxy")

;; C-t L - Reload the ~/.stumpwmrc configuration
(define-key *root-map* (kbd "L") "loadrc")

;; C-t F6 - Decrement the brightness by 5
(defcommand dec-brightness () ()
  "Brightness decrement"
  (run-shell-command "~/bin/brightness/dec-brightness.sh 5"))
(define-key *root-map* (kbd "F5") "dec-brightness")

;; C-t F5 - Increment the brightness by 5
(defcommand inc-brightness () ()
  "Brightness increment"
  (run-shell-command "~/bin/brightness/inc-brightness.sh 5"))
(define-key *root-map* (kbd "F6") "inc-brightness")

;; C-t m - Min brightness
(defcommand min-brightness () ()
  "Minimum screen brightness"
  (run-shell-command "~/bin/brightness/min-brightness.sh"))
(define-key *root-map* (kbd "m") "min-brightness")

(defcommand half-brightness () ()
  "Half screen brightness"
  (run-shell-command "~/bin/brightness/half-brightness.sh"))
(define-key *root-map* (kbd "C-M") "half-brightness")

;; C-t M - Max brightness
(defcommand max-brightness () ()
  "Maximum screen brightness"
  (run-shell-command "~/bin/brightness/max-brightness.sh"))
(define-key *root-map* (kbd "M") "max-brightness")

;; C-t C-o - wifi off
(defcommand wifi-off () ()
  "wifi off"
  (run-shell-command "~/bin/wifi/wifi-off.sh"))
(define-key *root-map* (kbd "C-o") "wifi-off")

;; C-t O - wifi on
(defcommand wifi-on () ()
  "wifi on"
  (run-shell-command "~/bin/wifi/wifi-on.sh"))
(define-key *root-map* (kbd "O") "wifi-on")

;; C-t C-p - relaunch panel
(defcommand relaunch-panel () ()
  "Relaunch panel"
  (run-shell-command "~/bin/panel/relaunch-panel.sh"))
(define-key *root-map* (kbd "C-p") "relaunch-panel")

;; C-t ^ - top
(defcommand top () ()
  "Display a single 'top' frame."
  (shell-command "top -b -n 1 -c -d 1"))
(define-key *root-map* (kbd "^") "top")

;; C-t o - Frame selection
(define-key *root-map* (kbd "o") "fselect")

;; C-t C-s - Add a binding for gnome-screenshot
(defprogram-shortcut :screenshot :command "gnome-screenshot"
                     :props '(:instance "gnome-screenshot")
                     :map *root-map* :key (stumpwm:kbd "C-s"))

;; C-t C-c - arduino ide
(defprogram-shortcut :arduino :command "arduino"
                     :props '(:class "processing-app-Base")
                     :map *root-map* :key (stumpwm:kbd "C-c"))

;;Set the mouse focus policy to ignore the mouse
(setf *mouse-focus-policy* :ignore) ;; :click, :ignore, :sloppy

;; Launch commands
(relaunch-panel)
(run-shell-command "/usr/bin/gnome-settings-daemon")
(run-shell-command "killall nm-applet && /usr/bin/nm-applet &")
(run-shell-command "/usr/bin/bluetooth-applet &")
(run-shell-command "/usr/bin/pactl load-module module-x11-xsmp &")
(run-shell-command "gnome-power-manager")
(run-shell-command "dropbox start")
(run-shell-command "nautilus --no-default-window")
;; start an emacs server in background
(run-shell-command "emacs --daemon &")
(terminal)
